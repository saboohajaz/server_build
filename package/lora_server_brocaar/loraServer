#!/bin/sh
#
# start portal services
#

NAME=lora-app-server
PIN=`cat /usr/bin/packet_forwarder/pin`

certificateHandling() {
	echo "Certificate handler: "
	if [[ ! -r /etc/$NAME/certs/http-key.pem ]] && [[ ! -r /etc/$NAME/certs/http.pem ]]; then
		mkdir -p /etc/$NAME/certs
		openssl req -x509 -newkey rsa:4096 -keyout /etc/$NAME/certs/http-key.pem -out /etc/$NAME/certs/http.pem -days 365 -nodes -batch -subj "/CN=localhost"
		echo "A self-signed TLS certificate has been generated : /etc/$NAME/certs"
	fi
}

settime()
{
	CURR=`date`
	reqsub='1970'
	if [ -n "${CURR##*$reqsub*}" ] ;then
		echo "Time set"
	else
		DATE=`cat /usr/sbin/loraServer/buildtime`
		date -s "$DATE"
	fi
}

startDatabase() {
	echo "Starting Postgres Database: "
	OUTPUT="$(sudo -u postgres psql -c "\du")"
	reqsub='loraserver_as'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Role Exists: '$reqsub'."
	else
		echo "Role doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create role loraserver_as with login password 'dbpassword';"
	fi
	reqsub='loraserver_ns'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Role Exists: '$reqsub'."
	else
		echo "Role doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create role loraserver_ns with login password 'dbpassword';"
	fi

	OUTPUT="$(sudo -u postgres psql -c "\l")"
	reqsub='loraserver_as'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Database Exists: '$reqsub'."
	else
		echo "Database doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create database loraserver_as with owner loraserver_as;"
		sudo -u postgres psql -d loraserver_as -c "create extension pg_trgm;"
	fi
	reqsub='loraserver_ns'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Database Exists: '$reqsub'."
	else
		echo "Database doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create database loraserver_ns with owner loraserver_ns;"
	fi

	echo "Database Setup Done"
}

logfile()
{
    suffix=0
    file="$1/$2"
    if [ -e "$file" ]
    then
        while test -e "$file"; do
            file="$1/$2.$((++suffix))"
        done
        mv -v $1/$2 "$file"
    fi
}

res=0
GWDIR=/opt/log/lora_gateway
GWFILE=$GWDIR/lora_gateway.log
PFDIR=/opt/log/lora_pkt_fwd
PFFILE=$PFDIR/lora_pkt_fwd.log

check_concentrator()
{
	res=1
	cat $GWFILE | grep "ERROR: CONCENTRATOR"  > /dev/null
	if [ $? -eq 0 ]; then
		res=0
	else
		cat $GWFILE | grep "197 (should be 197)" > /dev/null
		if [ $? -eq 0 ]; then
			cat $GWFILE | grep "11 (should be 11)" > /dev/null
			if [ $? -eq 0 ]; then
				cat $GWFILE | grep "49253 (should be 49253)" > /dev/null
				if [ $? -eq 0 ]; then
					cat $GWFILE | grep "3173 (should be 3173)" > /dev/null
					if [ $? -eq 0 ]; then
						echo "Concentrator Good" > $PFFILE
					else
						res=0
					fi
				else
					res=0
				fi
			else
				res=0
			fi
		else
			res=0
		fi
	fi
}


start() {
	settime
	echo "Starting Portal Services: "
	startDatabase
	echo "Certificates: "
	certificateHandling
	echo "Portal services: "
	mkdir -p $GWDIR
	mkdir -p $PFDIR
	logfile $PFDIR lora_pkt_fwd.log
	logfile $GWDIR lora_gateway.log

	/usr/bin/lora_gateway/reset_lgw.sh start $PIN
	/usr/bin/lora_gateway/libloragw/test_loragw_reg > $GWFILE

	# check if concentrator connected and correct pin was used
	check_concentrator

	# check for alternative pin
	if [ $res -eq 0 ]; then
		for u in 7 17 25  
		do  
			logfile $GWDIR lora_gateway.log
			/usr/bin/lora_gateway/reset_lgw.sh start $u
			/usr/bin/lora_gateway/libloragw/test_loragw_reg > $GWFILE
			check_concentrator
			if [ $res -eq 1 ]; then
				break;
			fi
		done		
	fi

	if [ $res -eq 1 ]; then
		OUTPUT="$(ps | grep lora_pkt_fwd)"
		reqsub='./lora_pkt_fwd'
		i="0"
		while [ -n "${OUTPUT##*$reqsub*}" ] && [  $i -lt 10 ]
		do
			echo "$i  Process not running: '$reqsub'. Starting ..."
			cd /usr/bin/packet_forwarder/lora_pkt_fwd && ./lora_pkt_fwd > $PFFILE 2>&1 &
			let i=i+1
			sleep 1
			OUTPUT="$(ps | grep lora_pkt_fwd)"
		done
	fi

	/usr/sbin/loraServer/loraServerInit lora-gateway-bridge start
	/usr/sbin/loraServer/loraServerInit loraserver start
	/usr/sbin/loraServer/loraServerInit lora-app-server start
	echo "Started Portal Services"
}
stop() {
	echo "Stopping Portal Services: "
	/usr/sbin/loraServer/loraServerInit lora-gateway-bridge stop
	/usr/sbin/loraServer/loraServerInit loraserver stop
	/usr/sbin/loraServer/loraServerInit lora-app-server stop
	echo "OK"
}
restart() {
	stop
	start
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart|reload)
		restart
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
esac

exit $?
