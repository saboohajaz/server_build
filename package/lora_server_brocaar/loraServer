#!/bin/sh
#
# start portal services
#

NAME=lora-app-server
PIN=`cat /usr/bin/packet_forwarder/pin`

certificateHandling() {
	echo "Certificate handler: "
	if [[ ! -r /etc/$NAME/certs/http-key.pem ]] && [[ ! -r /etc/$NAME/certs/http.pem ]]; then
		mkdir -p /etc/$NAME/certs
		openssl req -x509 -newkey rsa:4096 -keyout /etc/$NAME/certs/http-key.pem -out /etc/$NAME/certs/http.pem -days 365 -nodes -batch -subj "/CN=localhost"
		echo "A self-signed TLS certificate has been generated : /etc/$NAME/certs"
	fi
}

settime()
{
	CURR=`date`
	reqsub='1970'
	if [ -n "${CURR##*$reqsub*}" ] ;then
		echo "Time set"
	else
		DATE=`cat /usr/sbin/loraServer/buildtime`
		date -s "$DATE"
	fi
}

startDatabase() {
	echo "Starting Postgres Database: "
	OUTPUT="$(sudo -u postgres psql -c "\du")"
	reqsub='loraserver_as'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Role Exists: '$reqsub'."
	else
		echo "Role doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create role loraserver_as with login password 'dbpassword';"
	fi
	reqsub='loraserver_ns'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Role Exists: '$reqsub'."
	else
		echo "Role doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create role loraserver_ns with login password 'dbpassword';"
	fi

	OUTPUT="$(sudo -u postgres psql -c "\l")"
	reqsub='loraserver_as'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Database Exists: '$reqsub'."
	else
		echo "Database doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create database loraserver_as with owner loraserver_as;"
		sudo -u postgres psql -d loraserver_as -c "create extension pg_trgm;"
	fi
	reqsub='loraserver_ns'
	if [ -z "${OUTPUT##*$reqsub*}" ] ;then
		echo "Database Exists: '$reqsub'."
	else
		echo "Database doesn't Exists: '$reqsub'. Adding ..."
		sudo -u postgres psql -c "create database loraserver_ns with owner loraserver_ns;"
	fi

	echo "Database Setup Done"
}

logfile()
{
    suffix=0
    file="$1/$2"
    if [ -e "$file" ]
    then
        while test -e "$file"; do
            file="$1/$2.log.$((++suffix))"
        done
        mv -v $1/$2.log "$file"
    fi
}


start() {
	settime
	echo "Starting Portal Services: "
	startDatabase
	echo "Certificates: "
	certificateHandling
	echo "Portal services: "
	mkdir -p /opt/log/lora_gateway
	mkdir -p /opt/log/lora_pkt_fwd
	logfile /opt/log/lora_pkt_fwd lora_pkt_fwd.log
	logfile /opt/log/lora_gateway lora_gateway.log

	/usr/bin/lora_gateway/reset_lgw.sh start $PIN
	/usr/bin/lora_gateway/libloragw/test_loragw_reg > /opt/log/lora_gateway/lora_gateway.log
	OUTPUT="$(ps | grep lora_pkt_fwd)"
	reqsub='./lora_pkt_fwd'
	i="0"
	while [ -n "${OUTPUT##*$reqsub*}" ] && [  $i -lt 10 ]
	do
		echo "$i  Process not running: '$reqsub'. Starting ..."
		cd /usr/bin/packet_forwarder/lora_pkt_fwd && ./lora_pkt_fwd > /opt/log/lora_pkt_fwd/lora_pkt_fwd.log 2>&1 &
		let i=i+1
		sleep 1
		OUTPUT="$(ps | grep lora_pkt_fwd)"
	done

	/usr/sbin/loraServer/loraServerInit lora-gateway-bridge start
	/usr/sbin/loraServer/loraServerInit loraserver start
	/usr/sbin/loraServer/loraServerInit lora-app-server start
	echo "Started Portal Services"
}
stop() {
	echo "Stopping Portal Services: "
	/usr/sbin/loraServer/loraServerInit lora-gateway-bridge stop
	/usr/sbin/loraServer/loraServerInit loraserver stop
	/usr/sbin/loraServer/loraServerInit lora-app-server stop
	echo "OK"
}
restart() {
	stop
	start
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart|reload)
		restart
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
esac

exit $?
